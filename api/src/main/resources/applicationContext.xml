<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xmlns:jdbc="http://www.springframework.org/schema/jdbc"  
    xmlns:jee="http://www.springframework.org/schema/jee" xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:jpa="http://www.springframework.org/schema/data/jpa"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
        http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.2.xsd
        http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.2.xsd
        http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
        http://www.springframework.org/schema/data/jpa http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
    default-lazy-init="false">

    <aop:config proxy-target-class="true"/>

    <context:component-scan base-package="com.ainia.ecgApi">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>
    
    <bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean"> 
        <property name="dataSource" ref="dataSource"/>
        <property name="jpaVendorAdapter" ref="hibernateJpaVendorAdapter"/>
        <property name="packagesToScan" value="com.ainia.ecgApi"/>
        <property name="jpaProperties">
            <props>
                <!-- 命名规则 My_NAME->MyName -->
                <prop key="hibernate.ejb.naming_strategy">org.hibernate.cfg.ImprovedNamingStrategy</prop>
            </props>
        </property>
    </bean>

    <bean id="hibernateJpaVendorAdapter" class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
        <property name="databasePlatform" value="${database.dialect}"></property>
        <property name="showSql" value="${hibernate.showSql}" />
    </bean>
    <!-- 
    import org.hibernate.dialect.H2Dialect;
    import org.hibernate.dialect.MySQL5InnoDBDialect; 
    import org.hibernate.dialect.Oracle10gDialect;
     -->
    <jpa:repositories base-package="com.ainia.ecgApi"  transaction-manager-ref="transactionManager" entity-manager-factory-ref="entityManagerFactory"/>
   
    <!-- Jpa 事务配置 -->
    <bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
        <property name="entityManagerFactory" ref="entityManagerFactory"/>
    </bean>

    <!-- 使用annotation定义事务 -->
    <!-- tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" /-->
  
    <aop:config>  
        <aop:advisor pointcut="execution(* com.ainia.ecgApi.service.**.*Service.*(..))" advice-ref="txAdvice"/>  
    </aop:config> 

    <tx:advice id="txAdvice" transaction-manager="transactionManager">  
        <tx:attributes>  
            <tx:method name="get*" read-only="true"/>  
            <tx:method name="query*" read-only="true"/>  
            <tx:method name="find*" read-only="true"/>  
            <tx:method name="load*" read-only="true"/>  
            <tx:method name="save*" read-only="false"/>
            <tx:method name="create*" read-only="false"/>
            <tx:method name="update*" read-only="false"/>
            <tx:method name="patch*" read-only="false"/>
            <tx:method name="delete*" read-only="false"/>
            <tx:method name="add*" read-only="false"/>
            <tx:method name="remove*" read-only="false"/>
            <tx:method name="*"  no-rollback-for="com.ainia.ecgApi.core.exception.InfoException"/>
            <tx:method name="*"  rollback-for="RuntimeException"/>  
        </tx:attributes>  
    </tx:advice>     
    
    <bean id="validator" class="org.springframework.validation.beanvalidation.LocalValidatorFactoryBean" />

    <bean id="conversionService"
          class="org.springframework.context.support.ConversionServiceFactoryBean">
        <property name="converters">
            <list>
                <bean class="com.ainia.ecgApi.core.bean.converter.StringToDateConverter"/>
                <bean class="com.ainia.ecgApi.core.bean.converter.StringToBooleanConverter"/>
            </list>
        </property>
    </bean>
    
    <bean class="org.dozer.spring.DozerBeanMapperFactoryBean">
       <property name="mappingFiles">
            <list>
                <value>classpath*:mapping/mapping.xml</value>
            </list>
        </property>
        <property name="customConverters">
            <list>
                <bean class="com.ainia.ecgApi.core.bean.converter.DozerStringDateConverter" />
            </list>
        </property>
    </bean>
    
    <bean id="mapper" class="org.dozer.DozerBeanMapper">
        <property name="mappingFiles">
            <list>
                <value>classpath*:mapping/mapping.xml</value>
            </list>        
        </property>
        <property name="customConverters">
            <list>
                <bean class="com.ainia.ecgApi.core.bean.converter.DozerStringDateConverter" />
            </list>
        </property>
    </bean>
    
    <!-- 非spring bean 下获得bean的工具类 -->
    <bean class="com.ainia.ecgApi.core.utils.ServiceUtils" lazy-init="false"/>
    
    <!-- 定时排程 -->
  <bean id="employeeCheckLiveJob" class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean"> 
      <property name="targetObject"> 
          <ref bean="employeeService"/> 
      </property> 
      <property name="targetMethod">  <!-- 要执行的方法名称 --> 
          <value>checkLive</value> 
      </property> 
    </bean>

 

    <!-- ======================== 调度触发器 ======================== --> 
    <bean id="employeeCheckLiveTrigger" class="org.springframework.scheduling.quartz.CronTriggerFactoryBean"> 
      <property name="jobDetail" ref="employeeCheckLiveJob"></property> 
      <property name="cronExpression" value="0 0/3 * ? * *"></property>
    </bean> 

    <!-- ======================== 调度工厂 ======================== --> 
    <bean id="SpringJobSchedulerFactoryBean" class="org.springframework.scheduling.quartz.SchedulerFactoryBean"> 
      <property name="triggers"> 
          <list>  
              <ref bean="employeeCheckLiveTrigger"/>
          </list> 
      </property> 
    </bean>
        
    <!-- production环境 -->
    <beans profile="production">
        <context:property-placeholder ignore-unresolvable="true"
            location="classpath*:/application.properties" />    
        
        <!-- 数据源配置, 使用DBCP数据库连接池 -->
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driver}" />
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <property name="defaultAutoCommit" value="false" />
        </bean>

        <!-- 初始化数据表结构 与默认数据-->
        <jdbc:initialize-database data-source="dataSource" ignore-failures="NONE">
            <jdbc:script location="classpath:sql/mysql/schema.sql" />
            <jdbc:script location="classpath:sql/mysql/data.sql" encoding="UTF-8"/>
        </jdbc:initialize-database>        
        <!-- 数据源配置,使用应用服务器的数据库连接池 -->
        <!--<jee:jndi-lookup id="dataSource" jndi-name="java:comp/env/jdbc/ExampleDB" />-->
    </beans>
    
    <beans profile="development">
        <context:property-placeholder ignore-resource-not-found="true"
            location="classpath*:/application.development.properties" />    

        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driver}" />
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <property name="defaultAutoCommit" value="false" />
        </bean>

        <!-- 初始化数据表结构 与默认数据-->
        <jdbc:initialize-database data-source="dataSource" ignore-failures="NONE">
            <jdbc:script location="classpath:sql/h2/schema.sql" />
            <jdbc:script location="classpath:sql/h2/data.sql" encoding="UTF-8"/>
        </jdbc:initialize-database>
    </beans>
    
    <beans profile="test">
        <context:property-placeholder ignore-resource-not-found="true"
            location="classpath*:/application.test.properties" />   
        
        <bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
            <property name="driverClassName" value="${jdbc.driver}" />
            <property name="url" value="${jdbc.url}" />
            <property name="username" value="${jdbc.username}" />
            <property name="password" value="${jdbc.password}" />
            <property name="defaultAutoCommit" value="false" />
        </bean>

        <!-- 初始化数据表结构 与默认数据-->
        <jdbc:initialize-database data-source="dataSource" ignore-failures="NONE">
            <jdbc:script location="classpath:sql/h2/schema.sql" />
            <jdbc:script location="classpath:sql/h2/data.sql" encoding="UTF-8"/>
        </jdbc:initialize-database>
    </beans>

</beans>